/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'SiddhiVinayaka' at '2/6/17 2:21 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    flatDir
    {
       	dirs 'C:/JavaLib'
       	dirs 'C:/JavaLib/slf4j-1.7.22'
       	dirs 'C:/JavaLib/allure'
		dirs 'C:/gradle/bin'
   	}
    
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.21'
    compile files('C:/JavaLib/slf4j-1.7.22/slf4j-api-1.7.22.jar')
	compile files('C:/JavaLib/slf4j-1.7.22/slf4j-simple-1.7.22.jar')
    compile files('C:/JavaLib/selenium-server-standalone-3.0.1.jar')
    compile files('C:/JavaLib/allure/allure-testng-adaptor-1.4.23.HOTFIX1.jar')
    compile files('C:/JavaLib/allure/allure-java-annotations-1.4.23.HOTFIX1.jar')
    //compile files('C:/JavaLib/allure/allure-java-commons-1.4.0.RC9.jar')
    compile files('C:/JavaLib/allure/jaxb2-basics-runtime-1.11.1.jar')
    //compile files('C:/JavaLib/allure/AugmentedDriver-1.1.10.jar')
    compile files('C:/JavaLib/allure/jaxb-impl-2.2-promoted-b65.jar')
    compile files('C:/JavaLib/allure/jaxb-impl-2.3.0-b170127.1453.jar')
    compile files('C:/JavaLib/allure/allure-model-1.5.0.jar')
    compile files('C:/JavaLib/allure/properties-loader-1.6.jar')
    compile files('C:/JavaLib/allure/allure-java-adaptor-api-1.5.0.jar')
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'org.testng.annotations:testng:6.10'//'junit:junit:4.12'
    
    test.useTestNG()
}



test {
	useTestNG()
	
	//suites './testng-customsuite.xml'
	include './src/test/java/*.*'
	include './build/classes/test/MyAllureReportsTest.class'
	
	testLogging.showStandardStreams = true
	
	testLogging {
		events 'started', 'passed'
	}
	
	beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
	
}

